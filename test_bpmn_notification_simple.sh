#!/bin/bash

# Configuration
API_URL="http://localhost:8200"
AUTH_URL="http://localhost:8200/api/auth/login"
BPMN_FILE="diagram.bpmn"
EMAIL="jean.dupont@example.com"
PASSWORD="motDePasse123"

# Couleurs pour les messages
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== Test de d√©ploiement BPMN avec notifications ===${NC}"

# 1. Authentification pour obtenir un token JWT
echo -e "${YELLOW}1. Authentification...${NC}"
TOKEN_RESPONSE=$(curl -s -X POST "$AUTH_URL" \
  -H "Content-Type: application/json" \
  -d "{\"email\":\"$EMAIL\",\"password\":\"$PASSWORD\"}")

TOKEN=$(echo $TOKEN_RESPONSE | grep -o '"accessToken":"[^"]*' | cut -d'"' -f4)

if [ -z "$TOKEN" ]; then
  echo -e "${RED}‚ùå √âchec de l'authentification${NC}"
  exit 1
else
  echo -e "${GREEN}‚úÖ Authentification r√©ussie${NC}"
fi

# 2. V√©rifier les notifications avant d√©ploiement
echo -e "${YELLOW}2. V√©rification des notifications avant d√©ploiement...${NC}"
NOTIFICATIONS_BEFORE=$(curl -s -X GET "$API_URL/api/notifications/user/1" \
  -H "Authorization: Bearer $TOKEN")

NOTIF_COUNT_BEFORE=$(echo $NOTIFICATIONS_BEFORE | grep -o '"id"' | wc -l)
echo -e "${BLUE}üìä Nombre de notifications avant: $NOTIF_COUNT_BEFORE${NC}"

# 3. D√©ployer le processus BPMN
echo -e "${YELLOW}3. D√©ploiement du processus BPMN...${NC}"

# V√©rifier que le fichier BPMN existe
if [ ! -f "$BPMN_FILE" ]; then
  echo -e "${RED}‚ùå Fichier BPMN non trouv√©: $BPMN_FILE${NC}"
  exit 1
fi

# Informations de base du processus
PROCESS_INFO='{"name":"NotificationTest","description":"Test de notification","tags":["test","notification"],"processId":null}'

# Configuration de t√¢che avec notification activ√©e et assignation utilisateur directe
TASK_CONFIG='[{"taskId":"Activity_0v45ixi","taskName":"NotificationTest","taskType":"NONE","resource":{"attachmentsEnabled":true,"attachmentType":4},"information":{"category":"technical"},"habilitation":{"assignedUser":1,"assigneeType":"user"},"notification":{"notifyOnCreation":true,"notifyOnDeadline":true,"reminderBeforeDeadline":120,"notificationSensitivity":"public"}}]'

# D√©ployer le BPMN
DEPLOY_RESPONSE=$(curl -s -X POST "$API_URL/bpmn" \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: multipart/form-data" \
  -F "bpmnFile=@$BPMN_FILE" \
  -F "processInfo=$PROCESS_INFO" \
  -F "taskConfigurations=$TASK_CONFIG")

PROCESS_ID=$(echo $DEPLOY_RESPONSE | grep -o '"id":"[^"]*' | head -1 | cut -d'"' -f4)

if [ -z "$PROCESS_ID" ]; then
  echo -e "${RED}‚ùå √âchec du d√©ploiement${NC}"
  echo -e "${RED}R√©ponse: $DEPLOY_RESPONSE${NC}"
  exit 1
else
  echo -e "${GREEN}‚úÖ D√©ploiement r√©ussi avec ID: $PROCESS_ID${NC}"
fi

# 4. Extraire l'ID de l'instance de processus de la r√©ponse de d√©ploiement
PROCESS_INSTANCE_ID=$(echo $DEPLOY_RESPONSE | grep -o '"processInstanceId":"[^"]*' | head -1 | cut -d'"' -f4)

if [ -z "$PROCESS_INSTANCE_ID" ]; then
  echo -e "${RED}‚ùå Impossible de r√©cup√©rer l'ID d'instance de processus${NC}"
  echo -e "${BLUE}üîç Tentative de r√©cup√©ration via l'API...${NC}"
  
  # Tentative alternative de r√©cup√©ration des instances de processus
  PROCESS_INSTANCES=$(curl -s -X GET "$API_URL/engine-rest/process-instance?processDefinitionKey=NotificationTest" \
    -H "Authorization: Bearer $TOKEN")
  
  PROCESS_INSTANCE_ID=$(echo $PROCESS_INSTANCES | grep -o '"id":"[^"]*' | head -1 | cut -d'"' -f4)
  
  if [ -z "$PROCESS_INSTANCE_ID" ]; then
    echo -e "${RED}‚ùå Impossible de r√©cup√©rer l'ID d'instance de processus${NC}"
  else
    echo -e "${GREEN}‚úÖ ID d'instance de processus r√©cup√©r√©: $PROCESS_INSTANCE_ID${NC}"
  fi
else
  echo -e "${GREEN}‚úÖ ID d'instance de processus: $PROCESS_INSTANCE_ID${NC}"
fi

# 5. Forcer la synchronisation des assignations de t√¢ches
if [ ! -z "$PROCESS_INSTANCE_ID" ]; then
  echo -e "${YELLOW}5. For√ßage de la synchronisation des assignations...${NC}"
  SYNC_RESPONSE=$(curl -s -X POST "$API_URL/bpmn/process/$PROCESS_INSTANCE_ID/force-sync" \
    -H "Authorization: Bearer $TOKEN")
  
  SYNC_SUCCESS=$(echo $SYNC_RESPONSE | grep -o '"success":true' | wc -l)
  
  if [ $SYNC_SUCCESS -gt 0 ]; then
    echo -e "${GREEN}‚úÖ Synchronisation forc√©e r√©ussie${NC}"
    TASKS_COUNT=$(echo $SYNC_RESPONSE | grep -o '"tasksCount":[0-9]*' | cut -d':' -f2)
    echo -e "${BLUE}üìä Nombre de t√¢ches synchronis√©es: $TASKS_COUNT${NC}"
  else
    echo -e "${RED}‚ùå √âchec de la synchronisation forc√©e${NC}"
    echo -e "${RED}R√©ponse: $SYNC_RESPONSE${NC}"
  fi
fi

# 6. Attendre quelques secondes pour que les notifications soient g√©n√©r√©es
echo -e "${YELLOW}6. Attente de la g√©n√©ration des notifications...${NC}"
sleep 5

# 7. V√©rifier les notifications apr√®s d√©ploiement
echo -e "${YELLOW}7. V√©rification des notifications apr√®s d√©ploiement...${NC}"
NOTIFICATIONS_AFTER=$(curl -s -X GET "$API_URL/api/notifications/user/1" \
  -H "Authorization: Bearer $TOKEN")

NOTIF_COUNT_AFTER=$(echo $NOTIFICATIONS_AFTER | grep -o '"id"' | wc -l)
echo -e "${BLUE}üìä Nombre de notifications apr√®s: $NOTIF_COUNT_AFTER${NC}"

# 6. V√©rifier si de nouvelles notifications ont √©t√© cr√©√©es
if [ $NOTIF_COUNT_AFTER -gt $NOTIF_COUNT_BEFORE ]; then
  NEW_NOTIFS=$((NOTIF_COUNT_AFTER - NOTIF_COUNT_BEFORE))
  echo -e "${GREEN}‚úÖ $NEW_NOTIFS nouvelles notifications ont √©t√© cr√©√©es${NC}"
  
  # Afficher les d√©tails des notifications
  echo -e "${YELLOW}D√©tails des notifications:${NC}"
  echo $NOTIFICATIONS_AFTER | grep -o '"id":[^,]*,"type":[^,]*,"subject":"[^"]*"' | sed 's/^/- /'
else
  echo -e "${RED}‚ùå Aucune nouvelle notification n'a √©t√© cr√©√©e${NC}"
fi

# 8. V√©rifier les t√¢ches cr√©√©es via l'API Camunda
echo -e "${YELLOW}8. V√©rification des t√¢ches cr√©√©es...${NC}"
TASKS=$(curl -s -X GET "$API_URL/engine-rest/task?processInstanceId=$PROCESS_ID" \
  -H "Authorization: Bearer $TOKEN")

TASK_COUNT=$(echo $TASKS | grep -o '"id"' | wc -l)

if [ $TASK_COUNT -gt 0 ]; then
  echo -e "${GREEN}‚úÖ $TASK_COUNT t√¢ches ont √©t√© cr√©√©es${NC}"
  
  # Afficher les d√©tails des t√¢ches
  echo -e "${YELLOW}D√©tails des t√¢ches:${NC}"
  echo $TASKS | grep -o '"id":"[^"]*","name":"[^"]*"' | sed 's/^/- /'
else
  echo -e "${RED}‚ùå Aucune t√¢che n'a √©t√© cr√©√©e${NC}"
fi

echo -e "${BLUE}=== Test termin√© ===${NC}"
